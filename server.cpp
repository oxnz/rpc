// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Calculator.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

#include <string>
#include <unordered_map>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace ::shared;
using namespace ::calc;

class CalculatorHandler : virtual public CalculatorIf {
 public:
  CalculatorHandler() {
    // Your initialization goes here
  }

  void ping() override {
    // Your implementation goes here
    printf("ping\n");
  }

  int32_t add(const int32_t r1, const int32_t r2) override {
    // Your implementation goes here
    printf("add\n");
    return r1 + r2;
  }

  int32_t calc(const int32_t seqid, const Work& work) override {
    printf("calc\n");
    int32_t r;
    switch (work.op) {
	    case Operation::ADD: r = work.r1 + work.r2; break;
	    case Operation::SUB: r = work.r1 - work.r2; break;
	    case Operation::MUL: r = work.r1 * work.r2; break;
	    case Operation::DIV: if (0 == work.r2) {
					 InvalidOperation e;
					 e.op = work.op;
					 e.repr = "cannot div by zero";
					 throw e;
				 }
				 r = work.r1 / work.r2;
				 break;
	    default:
				 {
					 InvalidOperation e;
					 e.op = work.op;
					 e.repr = "invalid operation";
					 throw e;
				 }
    }
    SharedStruct ss;
    ss.key = seqid;
    ss.value = std::to_string(r);
    m_memo[seqid] = ss;
    return r;
}

void zip() override {
	printf("zip\n");
}

void getStruct(SharedStruct& ss, const int32_t seqid) override {
	printf("getStruct(%d)\n", seqid);
	ss = m_memo[seqid];
}
void echo(std::string& _ret, const std::string& s) override {
	_ret = s;
}
protected:
std::unordered_map<int32_t, SharedStruct> m_memo;

};

int main(int argc, char **argv) {
	int port = 9090;
	::std::shared_ptr<CalculatorHandler> handler(new CalculatorHandler());
	::std::shared_ptr<TProcessor> processor(new CalculatorProcessor(handler));
	::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
	::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
	::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

	TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
	server.serve();
	return 0;
}

